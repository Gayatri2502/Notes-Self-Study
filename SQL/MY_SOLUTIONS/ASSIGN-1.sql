#1 

SELECT * FROM CITY WHERE POPULATION>100000 AND 
COUNTRYCODE = 'USA';

#2 

SELECT NAME FROM DB.CITY WHERE POPULATION >120000 AND 
COUNTRYCODE='USA';

#3

SELECT * FROM DB.CITY;

#4

SELECT * FROM DB.CITY WHERE ID = 1661;

#5 

SELECT * FROM DB.CITY WHERE COUNTRYCODE = "JPN";

#6

SELECT NAME FROM DB.CITY WHERE COUNTRYCODE = "JPN";

#7

SELECT CITY, STATE FROM DB.STATIONDATA; 

#8 

SELECT distinct(CITY) AS CITY_NAME FROM DB.STATIONDATA WHERE ID%2=0 ORDER BY CITY ASC;

#9 

SELECT count(CITY) AS TOTAL_CITY, count(distinct(CITY)) AS DISTINCT_CITY FROM DB.STATIONDATA;

#10

SELECT CITY, length(CITY) AS SHORTEST_CITY_NAME FROM DB.STATIONDATA 
ORDER BY length(CITY) LIMIT 1;

SELECT CITY, length(CITY) AS LONGEST_CITY_NAME FROM DB.STATIONDATA 
ORDER BY length(CITY) DESC LIMIT 1;

#11

SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE 
lower(CITY)  LIKE '%a' OR 
lower(CITY)  LIKE '%e' OR 
lower(CITY)  LIKE '%i' OR 
lower(CITY)  LIKE '%o' OR 
lower(CITY)  LIKE '%u' ORDER BY CITY;

#12

SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE 
CITY REGEXP '$[A,E,I,O,U]' OR CITY REGEXP 
'$[a,e,i,o,u]' ORDER BY CITY;

#13

SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE 
lower(CITY)  NOT LIKE '%a' AND 
lower(CITY)  NOT LIKE '%e' AND 
lower(CITY)  NOT LIKE '%i' AND
lower(CITY)  NOT LIKE '%o' AND
lower(CITY)  NOT LIKE '%u' ORDER BY CITY;

#14
 
SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE 
lower(CITY)  NOT LIKE '%a' AND 
lower(CITY)  NOT LIKE '%e' AND 
lower(CITY)  NOT LIKE '%i' AND
lower(CITY)  NOT LIKE '%o' AND
lower(CITY)  NOT LIKE '%u' ORDER BY CITY;

#15

SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE CITY
NOT REGEXP '[AEIOU]' OR CITY NOT REGEXP '[AEIOU]$';

#16

SELECT DISTINCT CITY FROM DB.STATIONDATA WHERE CITY
NOT REGEXP '[AEIOU]' AND CITY NOT REGEXP '[AEIOU]$';

#17 

CREATE TABLE IF NOT EXISTS DB.PRODUCT  (
PRODUCT_ID INT NOT NULL, 
CONSTRAINT PRIMARY KEY (PRODUCT_ID),
PRODUCT_NAME VARCHAR(50),
UNIT_PRICE INT

);

CREATE TABLE IF NOT EXISTS DB.SALES (
SELLER_ID INT NOT NULL, 
CONSTRAINT PRIMARY KEY (SELLER_ID),
PRODUCT_ID INT, 
CONSTRAINT FOREIGN KEY (PRODUCT_ID) 
REFERENCES DB.PRODUCT(PRODUCT_ID),
BUYER_ID INT, 
SALES_DATE DATE, 
QUANTITY INT , 
PRICE INT 
);

INSERT INTO DB.PRODUCT VALUES (1, "S8", 1000);
INSERT INTO DB.PRODUCT VALUES (2, 'G8', 800);
INSERT INTO DB.PRODUCT VALUES (3, "IPHONE", 1400);

INSERT INTO DB.SALES VALUES (1,1,1,"2019-01-21",2,2000);
INSERT INTO DB.SALES VALUES (1,2,2,"2019-02-17",1,800);
INSERT INTO DB.SALES VALUES (2,2,3,"2018-06-02",1,800);
INSERT INTO DB.SALES VALUES (3,3,4,"2019-05-13",2,2800);

SELECT PRODUCT_ID , PRODUCT_NAME FROM DB.PRODUCT
WHERE PRODUCT_ID = (SELECT PRODUCT_ID FROM DB.SALES WHERE 
SALES_DATE BETWEEN "2019-01-01" AND "2019-03-31"
) ORDER BY PRODUCT_ID ASC ;

#18

CREATE TABLE IF NOT EXISTS DB.VIEWS(
ARTICLE_ID INT , 
AUTHOR_ID  INT , 
VIEWER_ID INT , 
VIEW_DATE DATE
);

INSERT INTO DB.VIEWS VALUES (1,3,5,"2019-08-01");
INSERT INTO DB.VIEWS VALUES (1,3,6,"2019-08-02");
INSERT INTO DB.VIEWS VALUES (2,7,7,"2019-08-01");
INSERT INTO DB.VIEWS VALUES (2,7,6,"2019-08-02");
INSERT INTO DB.VIEWS VALUES (4,7,1,"2019-07-22");
INSERT INTO DB.VIEWS VALUES (3,4,4,"2019-07-21");
INSERT INTO DB.VIEWS VALUES (3,4,4,"2019-07-21");

SELECT * FROM DB.VIEWS;
TRUNCATE TABLE DB.VIEWS;

SELECT DISTINCT AUTHOR_ID FROM DB.VIEWS WHERE AUTHOR_ID = VIEWER_ID 
ORDER BY AUTHOR_ID ASC;


#19

CREATE TABLE IF NOT EXISTS DB.DELIVERY(
DELIVERY_ID INT , 
CONSTRAINT PRIMARY KEY(DELIVERY_ID),
CUSTOMER_ID INT , 
ORDER_DATE DATE, 
CUSTOMER_PREF_DELIVERY_DATE DATE
);

INSERT INTO DB.DELIVERY VALUES(1,1,"2019-08-01","2019-08-02");
INSERT INTO DB.DELIVERY VALUES(2,5,"2019-08-02","2019-08-02");
INSERT INTO DB.DELIVERY VALUES(3,1,"2019-08-11","2019-08-11");
INSERT INTO DB.DELIVERY VALUES(4,3,"2019-08-24","2019-08-26");
INSERT INTO DB.DELIVERY VALUES(5,4,"2019-08-21","2019-08-22");
INSERT INTO DB.DELIVERY VALUES(6,2,"2019-08-11","2019-08-13");

SELECT ROUND(D2.QUICK_ORDERS*100/COUNT(D1.DELIVERY_ID),2) AS QUICK_ORDER_PERCENTAGE FROM DB.DELIVERY D1,
(SELECT COUNT(DELIVERY_ID) AS QUICK_ORDERS FROM DB.DELIVERY WHERE ORDER_DATE = CUSTOMER_PREF_DELIVERY_DATE) D2;

#20

CREATE TABLE IF NOT EXISTS DB.ADS (
AD_ID INT, 
CONSTRAINT PRIMARY KEY(AD_ID, USER_ID),
USER_ID INT , 
ACTION ENUM('CLICKED','VIEWED','IGNORED')

);
SELECT * FROM DB.ADS;
TRUNCATE TABLE DB.ADS;
INSERT INTO DB.ADS VALUES(2,2,'CLICKED');
INSERT INTO DB.ADS VALUES(3,3, 'VIEWED');
INSERT INTO DB.ADS VALUES(5,5,'IGNORED');
INSERT INTO DB.ADS VALUES(1,7,'IGNORED');
INSERT INTO DB.ADS VALUES(2,7,'VIEWED');
INSERT INTO DB.ADS VALUES(3,5,'VIEWED');
INSERT INTO DB.ADS VALUES(1,4,'VIEWED');
INSERT INTO DB.ADS VALUES(2,11,'VIEWED');
INSERT INTO DB.ADS VALUES(1,2,'CLICKED');

SELECT AD_ID, 
IFNULL(ROUND(AVG(
CASE WHEN ACTION = 'CLICKED' THEN 1 
	WHEN ACTION = 'VIEWED' THEN 0
    ELSE NULL 
END 
)*100,2),0) AS CTR FROM DB.ADS 
GROUP BY AD_ID 
ORDER BY CTR DESC, AD_ID ASC;


#21

CREATE TABLE IF NOT EXISTS DB.EMPLOYEE1 (
EMPLOYEE_ID INT , 
TEAM_ID INT
);

INSERT INTO DB.EMPLOYEE1 VALUES 
(1,8), (2,8), (3,8), (4,7), (5,9), (6,9);

ALTER TABLE DB.EMPLOYEE1 ADD CONSTRAINT PRIMARY KEY(EMPLOYEE_ID);

SELECT EMPLOYEE_ID , 
COUNT(*) AS TEAM_SIZE FROM DB.EMPLOYEE1 
GROUP BY TEAM_ID;

SELECT EMPLOYEE_ID, 
(SELECT COUNT(*) FROM DB.EMPLOYEE1 AS E2 WHERE E1.TEAM_ID = E2.TEAM_ID)
 AS TEAM_SIZE FROM DB.EMPLOYEE1 AS E1;


select employee_id,
count(*) over(partition by team_id) as team_size
from DB.Employee1 order by team_size desc;

# 22 

CREATE TABLE IF NOT EXISTS DB.COUNTRIES (
COUNTRY_ID INT, 
CONSTRAINT PRIMARY KEY(COUNTRY_ID), 
COUNTRY_NAME VARCHAR(50)

);

CREATE TABLE IF NOT EXISTS DB.WHEATHER(
COUNTRY_ID INT, 
CONSTRAINT FOREIGN KEY(COUNTRY_ID) REFERENCES 
DB.COUNTRIES(COUNTRY_ID),
WEATHER_STATE INT ,
DAY DATE 

);

ALTER TABLE DB.WHEATHER ADD CONSTRAINT PRIMARY KEY (DAY);

INSERT INTO DB.COUNTRIES VALUES 
(2, 'USA'), (3,'AUSTRALIA'), (7, 'PERU'),
(5, 'CHINA'), (8, 'MOROCCO'), (9, 'SPAIN');

TRUNCATE TABLE DB.WHEATHER;

INSERT INTO DB.WHEATHER
VALUES
(2, 15, '2019-11-01'),
(2, 12, '2019-10-28'),
(2, 12, '2019-10-27'),
(3, -2, '2019-11-10'),
(3, 0, '2019-11-11'),
(3, 3, '2019-11-12'),
(5, 16, '2019-11-07'),
(5, 18, '2019-11-09'),
(5, 21, '2019-11-23'),
(7, 25, '2019-11-28'),
(7, 22, '2019-12-01'),
(7, 20, '2019-12-02'),
(8, 25, '2019-11-05'),
(8, 27, '2019-11-15'),
(8, 31, '2019-11-25'),
(9, 7, '2019-10-23'),
(9, 3, '2019-12-23');


SELECT COUNTRY_NAME, 
(CASE WHEN W.WEATHER_STATE <=15  THEN 'COLD'
		WHEN W.WEATHER_STATE>=25 THEN 'HOT'
        ELSE 'WARM'
	END 
) AS WHEATHER_TYPE
FROM DB.COUNTRIES AS C INNER JOIN DB.WHEATHER AS W 
WHERE C.COUNTRY_ID = W.COUNTRY_ID GROUP BY C.COUNTRY_NAME ORDER BY COUNTRY_NAME DESC;

#23 

CREATE TABLE IF NOT EXISTS DB.PRICES (
PRODUCT_ID INT, 
CONSTRAINT PRIMARY KEY (PRODUCT_ID, START_dATE, END_DATE, PRICE), 
START_DATE DATE, 
END_DATE DATE, 
PRICE INT 
);

CREATE TABLE IF NOT EXISTS DB.UNITSSOLD(
PRODUCT_ID INT, 
FOREIGN KEY (PRODUCT_ID) REFERENCES DB.PRICES(PRODUCT_ID),
PURCHASE_DATE INT , 
UNITS INT 
);

SELECT * FROM  DB.PRICES;
INSERT INTO DB.PRICES 
VALUES (1, '2019-02-17', '2019-02-28', 5),
       (1, '2019-03-01', '2019-03-22', 20),
       (2, '2019-02-01', '2019-02-20', 15),
       (2, '2019-02-21', '2019-03-31', 30);
SELECT * FROM DB.UNITSSOLD;
TRUNCATE TABLE DB.PRICES;
INSERT INTO DB.UNITSSOLD
VALUES
(1, '2019-02-25', 100),
(1, '2019-03-01', 15),
(2, '2019-02-10', 200),
(2, '2019-03-22', 30);


SELECT D1.PRODUCT_ID, 
IFNULL(ROUND(SUM(D1.PRICE * D2.UNITS)/SUM(D2.UNITS), 2),0)
AS AVG_PRICE FROM DB.PRICES AS D1 
JOIN DB.UNITSSOLD AS D2 
ON  (D1.PRODUCT_ID = D2.PRODUCT_ID AND 
D1.START_DATE <= D2.PURCHASE_dATE <= D1.END_DATE

) 
GROUP BY PRODUCT_ID;
 
SELECT D2.PRODUCT_ID , 
ROUND(SUM(D1.PRICE*D2.UNITS)/ SUM(D2.UNITS),2) AS AVG_PRICE 
FROM DB.PRICES D1
JOIN DB.UNITSSOLD D2 ON 
D1.PRODUCT_ID = D2.PRODUCT_ID AND
D2.PURCHASE_DATE >= D1.START_DATE AND 
D2.PURCHASE_DATE <= D1.END_DATE 
GROUP BY D2.PRODUCT_ID;

SELECT PRODUCT_ID , IFNULL(ROUND(TOTAL_PRICE/SUM(UNITS)),0) AS AVERAGE_PRICE
FROM  (
	SELECT D1.PRODUCT_ID AS PRODUCT_ID, 
    UNITS, 
    D1.PRICE*D2.UNITS AS TOTAL_PRICE
    FROM DB.PRICES D1 
    LEFT JOIN DB.UNITSSOLD D2 ON D1.PRODUCT_ID = D2.PRODUCT_ID 
    AND D2.PURCHASE_DATE BETWEEN D1.START_DATE AND D1.END_DATE
    ) AS TEMP 
    GROUP BY PRODUCT_ID
    

